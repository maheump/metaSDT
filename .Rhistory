install.packages("mgcv")
install.packages("rscproxy")
install.packages("ggplot2")
ggplot
ggplot2
install.packages("digest")
library(ggplot2)
matrix(c(26,21,38,44), nrow = 2)
matrix(c(26,21,38,44), nrow = 2, byrow = TRUE)
matrix(c(26,38,31,44), nrow = 2, byrow = TRUE)
a = matrix(c(26,21,38,44), nrow = 2, byrow = TRUE)
open a
a
chisq.test(a)
Xsq <- chisq.test(a)
Wsq$observed
(Xsq <- chisq.test(a))
as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
a
a<-as.table(a)
a
dimnames(M) <- list(health = c("improvement","no improvement"),
group = c("diet","no diet"))
dimnames(a) <- list(health = c("improvement","no improvement"),
+                     group = c("diet","no diet"))
dimnames(a) <- list(health = c("improvement","no improvement"), group = c("diet","no diet"))
a
Xsq <- chisq.test(a)
Xsq
Xsq$observed
Xsq$expected
Xsq$stdres
install.packages("vcd")
install.packages("vcd")
vcd
a
oddsratio(a)
a = matrix(c(26,21,38,44), nrow = 2, byrow = TRUE)
a
oddsratio(a)
install.packages("manipulate")
install.packages("abd")
odds.ratio(a)
# DRIFT DIFFUSION MODEL SIMULATION.
# DRIFT DIFFUSION MODEL SIMULATION.
# Maxime Maheu, 2014.
# Arguments :
# v : drift rate,
# a : decision boundaries,
# z : initial bias toward one of the choices,
# eta : amplitude of the noise,
# t0 : delay between the stimulus onset and the beginning of evidences accumulation (sensory delay),
# n_steps : number of time steps,
# n_iterations : number of decision processes.
DDMsimu <- function(v, a = 30, z = -5, eta = 0.75, t0 = 100, n_steps = 3000, n_iterations = 20) {
motor_delay <- 100 # Delay between reaching the boundary and made the motor command
# Temps par step fixe. Mais mettre dans les arguments une durÃ©e en millisecondes.
# Get the drift rate parameters
dt <- 0.1 # Time step (second)
mA <- 1.0 # Firing rate of the neuron A
mB <- mA - v # Firing rate of the neuron B
v <- (mA - mB) * dt
if (v < 0) {v = 0}
# Prepare reaction times and decision lists
RT_A <- rep(NA, n_iterations)
RT_B <- rep(NA, n_iterations)
decision <- rep(0, n_iterations)
# Initialize plot window
graphics.off()
layout(matrix(c(2, 1, 3), ncol = 1, byrow = TRUE), widths = 1, heights = c(1, 4, 1))
par(oma = c(3, 3, 3, 3))
# Get some random colors
colors <- rgb(runif(n_iterations), runif(n_iterations), runif(n_iterations))
# Draw the first plot
par(mar = c(0, 2, 0, 2), cex = 1.5)
plot.new()
plot.window(xlim = c(0, n_steps), ylim = c(-a, a), xaxs = "i", yaxs = "i")
# For each decision process
for (iteration in seq(1, n_iterations)) {
# Initialize some values
x <- rep(NA, n_steps) # Array of values
x[1] <- z
# For each time sample
for (time_step in seq(2, n_steps)) {
# Apply non-decision time
if (time_step <= t0) {
x[time_step] = z}
if (time_step > t0 & decision[iteration] != 0) {
x[time_step] = NA}
# If we are over the sensory delay, compute the accumulation of evidences
if (time_step > t0 & decision[iteration] == 0) {
noise = eta * rnorm(1, mean = 0, sd = 1) * sqrt(dt)
x[time_step] = x[time_step - 1] + v + noise}
# If the accumulation of evidences reach the thresold A
if (x[time_step] >= a & decision[iteration] == 0) {
RT_A[iteration] = time_step * dt # Time of the decision
decision[iteration] = 1} # Choose decision A
# If the accumulation of evidences reach the thresold B
if (x[time_step] <= -a & decision[iteration] == 0) {
RT_B[iteration] = time_step * dt # Time of the decision
decision[iteration] = -1} # Choose decision B
}
# Plot each accumulation of evidence
lines(x, col = colors[iteration])
}
# Plot theoretical drift rate and initial bias
arrows(x0 = t0, y0 = z, x1 = (t0 + (n_steps / 4)), y1 = (v * (t0 + (n_steps / 4)) + z), length = 0.2, angle = 35, code = 2, col = "black", lwd = 2)
abline(h = z, col = "black", lty = 2, lwd = 2)
# Display some informations on the graph
axis(2, at = c(-a, z, a), labels = c("B", "z", "A"), las = 2)
box(lwd = 2)
# Draw the second plot
par(mar = c(0, 2, 0, 2), xaxs = "i", yaxs = "i") #mar = c(5.1, 4.1, 4.1, 2.1)
if (length(na.omit(RT_A)) >= 1) {RT_A_hist <- hist((RT_A / dt), breaks = (n_iterations/2), main = "", xlim = c(0, n_steps), axes = FALSE, col = "blue")}
if (length(na.omit(RT_A)) >= 2) {RT_A_hist <- lines(density(na.omit(RT_A / dt), adjust = 2), lwd = 2)}
# Draw the third plot
par(mar = c(0, 2, 0, 2), xaxs = "i", yaxs = "i") #mar = c(0, 0, 0, 0)
if (length(na.omit(RT_B)) >= 1) {RT_B_hist <- hist((RT_B / dt), breaks = (n_iterations/2), main = "", yaxt = "n", xlim = c(0, n_steps), ylim = c(max(as.numeric(RT_A_hist[2])), 0), col = "red")}
if (length(na.omit(RT_B)) >= 2) {RT_B_hist <- lines(density(na.omit(RT_B / dt), adjust = 2), lwd = 2)}
# Label the outer margin area so we can see where it is
mtext("Drift Diffusion Model simulation", side = 3, line = 1, cex = 1.5, col = "black", outer = TRUE)
}
DDMsimu(.5)
DDMsimu(5)
DDMsimu(50)
DDMsimu(.01)
t.test(c(30, 40, 50), 0)
t.test(c(30, 40, 50), c(0, 2, 3))
t.test(c(30), c(0))
install.packages("fpc")
methods(t)
dudahart2
dudahart2
dudahart2{fpc}
library(fpc)
dudahart2
ds <- c(2, 3, 10, 11)
c <- c(1, 1, 2, 2)
dudahart2(ds, c)
rep(0, 2)
x <- as.matrix(x)
p <- ncol(x)
n <- nrow(x)
cln <- rep(0, 2)
W <- matrix(0, p, p)
for (i in 1:2) cln[i] <- sum(clustering == i)
x <- ds
rm(ds)
clustering <- c
rm(c)
x <- as.matrix(x)
p <- ncol(x)
n <- nrow(x)
cln <- rep(0, 2)
W <- matrix(0, p, p)
for (i in 1:2) cln[i] <- sum(clustering == i)
clx <- x[clustering == 1, ]
clx
clustering
x
x
p
n
cln
cln <- rep(0, 2)
W <- matrix(0, p, p)
cln
W
for (i in 1:2) cln[i] <- sum(clustering == i)
for (i in 1:2) {
clx <- x[clustering == i, ]}
clx
as.matrix(clx)
cclx <- cov(as.matrix(clx))
cclx
if (cln[i] < 2)
cclx <- 0
cclx
((cln[i] - 1) * cclx)
cclx
W + ((cln[i] - 1) * cclx)
W
diag(W)
qnorm(0.99)
compare <- 1 - 2/(pi * p) - z * sqrt(2 * (1 - 8/(pi^2 * p))/(n *
p))
z <- qnorm(1 - alpha)
compare <- 1 - 2/(pi * p) - z * sqrt(2 * (1 - 8/(pi^2 * p))/(n *
p))
z <- qnorm(1 - 0.001)
compare <- 1 - 2/(pi * p) - z * sqrt(2 * (1 - 8/(pi^2 * p))/(n *
+         p))
compare
qz <- (-dh + 1 - 2/(pi * p))/sqrt(2 * (1 - 8/(pi^2 * p))/(n *
p))
W1 <- (n - 1) * cov(as.matrix(x))
dh <- sum(diag(W))/sum(diag(W1))
z <- qnorm(1 - alpha)
compare <- 1 - 2/(pi * p) - z * sqrt(2 * (1 - 8/(pi^2 * p))/(n *
p))
qz <- (-dh + 1 - 2/(pi * p))/sqrt(2 * (1 - 8/(pi^2 * p))/(n *
p))
qz
p.value <- 1 - pnorm(qz)
p.value
cluster1 <- dh >= compare
cluster1
out <- list(p.value = p.value, dh = dh, compare = compare,
cluster1 = cluster1, alpha = alpha, z = z)
dudagart2
dudahart2
opendudahart2
open dudahart2
dudahart2
library(fpc)
dudahart2
median(1)
a = matrix(c(1:12), 3,4)
a
a[1,]
range(1, 10, 2)
range(1, 10, 5)
range(1, 10, 2)
range(1, 10:20)
range(1:10, :20)
1:10
1:10:100
range(1:10, 1)
range(1:10, 2)
range(1:10, 3)
range(1:3, 3)
install.packages("BayesFactor")
install.packages("BayesFactor")
setwd("~/Documents/R/metaSDT")
source("MM_metaSDT.r")
data <- read.csv("example_data.csv", header = TRUE, sep = ";")
View(data)
MM_metaSDT(input_data = example_data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 0)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 0)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 1)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 2)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 3)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 4)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 5)
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 0)
clc
MM_metaSDT(input_data = data, min_conf = 1, max_conf = 6, design = 2, typeI = 1, output = 0)
